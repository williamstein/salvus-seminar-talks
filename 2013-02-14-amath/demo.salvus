{
	"title": "<div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>Salvus Demo",
	"description": "(for AMath Talk on Feb 14, 2013)",
	"content": [
		{
			"title": "Calculus Examples",
			"content": [
				{
					"id": "2fd4805f-a887-4f20-8519-d2034797b848",
					"input": "f(x) = sin(x)*tan(x)\nshow(f)",
					"output": [
						{
							"tex": {
								"tex": "x \\ {\\mapsto}\\ \\sin\\left(x\\right) \\tan\\left(x\\right)",
								"display": true
							}
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "86af1c8b-9f7b-4c1c-9757-a2a8c486ed69",
					"input": "plot(f, (x, -pi,pi), ymin=-3, ymax=3, figsize=[8,3], fill=True, gridlines=True)",
					"output": [
						{
							"file": {
								"show": true,
								"uuid": "f0502560-98ce-4542-9cda-da23749e9329",
								"filename": "/home/9a797ca6/.sage/temp/u/2339/tmp_8_0jdC.svg"
							}
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "1d2b1ed8-6119-4763-9e5d-4e58b7f40610",
					"input": "g = integrate(f, x); show(g)",
					"output": [
						{
							"tex": {
								"tex": "x \\ {\\mapsto}\\ -\\frac{1}{2} \\, \\log\\left(\\sin\\left(x\\right) - 1\\right) + \\frac{1}{2} \\, \\log\\left(\\sin\\left(x\\right) + 1\\right) - \\sin\\left(x\\right)",
								"display": true
							}
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "789738b2-2213-4b84-b25f-7946aa8adbd2"
				}
			],
			"id": "7021c012-1ab0-4ddf-ab64-8d6d70fc4585"
		},
		{
			"id": "7932a063-ea72-44bb-9d73-4dc96697a520",
			"note": "<div><br></div><div><br></div><div><br></div><div><br></div>"
		},
		{
			"title": "Some Linear Algebra Examples",
			"content": [
				{
					"id": "fe58325a-fbd3-4cef-8a67-366e94406089",
					"note": "Playing with a random 3x3 matrix.",
					"input": "a = random_matrix(QQ, 3, num_bound=10, den_bound=10); show(a)",
					"output": [
						{
							"tex": {
								"tex": "\\left(\\begin{array}{rrr}\n-\\frac{3}{8} & -\\frac{5}{3} & \\frac{5}{8} \\\\\n-\\frac{1}{2} & \\frac{3}{5} & \\frac{1}{3} \\\\\n8 & -\\frac{7}{6} & \\frac{10}{3}\n\\end{array}\\right)",
								"display": true
							}
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "aa7ac590-3ffb-4cee-8e36-cbb65c6679f2",
					"note": "What can you do with a matrix? &nbsp;Answer: a \"dot tab\"",
					"input": "a."
				},
				{
					"id": "82ba910a-f23e-4356-8977-5c3b79f9b6fe",
					"note": "<br>",
					"input": "show(a^(-1))",
					"output": [
						{
							"tex": {
								"tex": "\\left(\\begin{array}{rrr}\n\\frac{381}{10229} & \\frac{750}{10229} & \\frac{1134}{10229} \\\\\n-\\frac{5280}{10229} & -\\frac{12810}{10229} & -\\frac{2184}{10229} \\\\\n\\frac{1015}{10229} & -\\frac{3640}{10229} & -\\frac{2415}{20458}\n\\end{array}\\right)",
								"display": true
							}
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "1000f48d-f715-43b1-b75b-cb3287c6101b",
					"input": "v = a \\ vector([1,2,3]); v",
					"output": [
						{
							"stdout": "(5283/10229, -37452/10229, -19775/20458)"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "ab0bb06e-789e-4b8c-9bcf-6ff25f2054c0",
					"input": "a*v ",
					"output": [
						{
							"stdout": "(1, 2, 3)"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "cefa9d50-5902-4841-b860-daa0d60ef7e4",
					"note": "<div><br></div><div><br></div>Let's make a huge 200x200 matrix:",
					"input": "a = random_matrix(ZZ, 200)\na[0]  # the first row",
					"output": [
						{
							"stdout": "(-1, 0, 3, 28, 0, 2, -1, 2, 1, -5, 1, 1, 1, 142, 0, -1, -1, 12, 1, 0, -1, -2, 2, -2, 1, -2, -3, -1, 1, -1, -1, -3, -2, -8, -1, 2, -8, 2, 13, -1, -28, -2, 1, 0, 1, 0, -1, 0, 5, 0, 0, 1, -7, -2, 4, 49, 0, 2, 2, 2, -1, -1, 0, -2, -6, 1, -1, -1, 0, -1, -1, -3, -1, -1, -2, 0, -4, 1, 6, 1, -1, 0, -2, 0, 0, 0, 0, 1, 0, -1, 1, 1, -4, -1, 2, -1, 1, 2, 1, 2, 2, -6, 0, -5, 1, -1, 1, -3, -8, 1, 545, -317, 2, 0, 1, 0, -1, 4, -1, -8, 5, -9, -1, -9, 0, 2, -1, 1, 21, 1, 0, -1, -7, 20, -3, -1, 0, 0, 0, -2, -6, 89, 0, 1, -3, -1, 2, 2, -1, 0, 0, 1, -1, 4, 0, 7, -9, 1, -4, -1, 0, -3, -11, -3, 14, -1, 1, 9, 0, 1, -2, -6, 0, -9, 5, 2, 8, -1, 3, -9, 0, 0, 1, 1, -26, 39, -1, 0, 0, 1, 1, 2, 0, 3, 2, 1, 0, 0, 385, -1)"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "25388fc6-2a7a-4ce0-964d-f89aababdb26",
					"note": "<div>Sage can compute the determinant in less than a second!<br></div>",
					"input": "%time a.det()",
					"output": [
						{
							"stdout": "71853482213833833035332986819076561528092344459790083298389233185862744660079324968432736586736437842490565698539998581644086373075020596267115965094239977434742562307197491115052716454781223788242833701729202759259052751513740632920396319769059223857663087430604422588399011368298642492658622587864069827347351351205529369491415341370441432588508684103465606370798493419648235925040870114227487267402039916374227050228378561662640665940749699829615970809539243435077428"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": "CPU time: 0.70 s, Wall time: 0.62 s"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "8d845d62-8678-41a3-9f5a-205becaf24c2",
					"note": "... and solve linear systems:",
					"input": "%time b = a \\ vector([1..200])",
					"output": [
						{
							"stdout": "CPU time: 0.24 s, Wall time: 0.23 s"
						},
						{
							"stdout": "\n"
						},
						{
							"stdout": ""
						}
					]
				},
				{
					"id": "1cbe6746-cfbe-4155-a23d-81c50b6dde89"
				},
				{
					"id": "5101db70-3e6e-4ab0-acf0-78b415cff416"
				}
			],
			"id": "949badc9-26da-4f42-8c69-01654bd08a79"
		},
		{
			"id": "cb0684cb-d696-4623-8634-700717873b7f"
		},
		{
			"id": "dd43d6b7-dbcb-454e-bd11-dcd9201a4090",
			"note": "Image Compression via an Interact",
			"input": "import pylab, numpy\n\nX = pylab.imread('sage_banner.png')\nA_image = numpy.mean(X, 2)\nu,s,v = numpy.linalg.svd(A_image)\nS = numpy.zeros(A_image.shape)\nS[:len(s),:len(s)] = numpy.diag(s)\nn = A_image.shape[0]\n\n@interact\ndef svd_image(i = (\"Eigenvalues (quality)\",\n                   (20,(1..A_image.shape[0]//2)))):\n    A_approx = numpy.dot(numpy.dot(u[:,:i], S[:i,:i]), v[:i,:])\n    g = graphics_array([matrix_plot(A_approx),\n                        matrix_plot(A_image)])\n    show(g, axes=False, figsize=[10,5], svg=False)\n    html(\"<br>%sx%s image compressed to %.1f%% of size using %s eigenvalues.\"%(\n            A_image.shape[0], A_image.shape[1],100*(2.0*i*n+i)/(n*n), i))"
		},
		{
			"id": "329a4af7-55a6-4489-b623-57e5dbd8dec2",
			"input": "type(graphics_array([[plot(sin)]]))",
			"output": [
				{
					"stdout": "<class 'sage.plot.graphics.GraphicsArray'>"
				},
				{
					"stdout": "\n"
				},
				{
					"stdout": ""
				}
			]
		},
		{
			"id": "8b119c64-f9a6-47c2-b704-78f31b7f9098"
		},
		{
			"id": "773ac727-0508-493a-9088-191ff9c05f8f"
		},
		{
			"id": "f524155b-c5ba-4b12-97eb-62a6902cdbdb"
		}
	]
}